// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["referentialIntegrity", "fullTextSearch", "fullTextIndex"]
}

datasource db {
    provider             = "mysql"
    url                  = env("DATABASE_URL")
    referentialIntegrity = "prisma"
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String     @id @default(cuid())
    name          String?
    email         String?    @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    questions     Question[]
    likes         Like[]
    comments      Comment[]
    followers     Follow[]   @relation("followings")
    followings    Follow[]   @relation("followers")
    points        Int        @default(0)
    progress      Progress[]

    @@fulltext([name, email])
}

//TODO: implement Question model and relate to the Progress
model Progress {
    lastEvaluated DateTime @updatedAt
    interval      Float    @default(0)
    repetition    Float    @default(0)
    efactor       Float    @default(2.5)
    userId        String
    user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    questionId    String
    question      Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

    @@id([userId, questionId], name: "progress_identifier")
    @@unique([userId, questionId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// Main models
model Question {
    id          String     @id @default(cuid())
    caption     String     @db.Text
    videoURL    String     @db.Text
    coverURL    String     @db.Text
    videoWidth  Int
    videoHeight Int
    userId      String
    createdAt   DateTime   @default(now())
    updatedAt   DateTime   @updatedAt
    user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
    likes       Like[]
    comments    Comment[]
    hashtags    Hashtag[]
    progress    Progress[]
    contentType Int       @default(3) // 1: image, 2: video, 3: unknown

    @@fulltext([caption])
}

model Hashtag {
    id        Int        @id @default(autoincrement())
    tag       String     @unique
    questions Question[]
}

model Like {
    questionId String
    userId     String
    user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

    @@id([questionId, userId])
}

model Comment {
    id         String   @id @default(cuid())
    questionId String
    userId     String
    content    String
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model Follow {
    followerId  String
    followingId String
    follower    User   @relation("followers", fields: [followerId], references: [id], onDelete: Cascade)
    following   User   @relation("followings", fields: [followingId], references: [id], onDelete: Cascade)

    @@id([followingId, followerId])
}
