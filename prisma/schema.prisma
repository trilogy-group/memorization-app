// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["referentialIntegrity", "fullTextSearch", "fullTextIndex"]
}

datasource db {
    provider             = "mysql"
    url                  = env("DATABASE_URL")
    referentialIntegrity = "prisma"
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String         @id @default(cuid())
    name          String?
    email         String?        @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    likes         Like[]
    comments      Comment[]
    followers     Follow[]       @relation("followings")
    followings    Follow[]       @relation("followers")
    points        Int            @default(0)
    progress      Progress[]
    notifications Notification[]
    masteryId     Int?
    mastery       Mastery?       @relation(fields: [masteryId], references: [id])
    concepts      Concept[]

    @@fulltext([name, email])
}

model Progress {
    nextEvaluate DateTime
    interval     Float    @default(0)
    repetition   Int      @default(0)
    efactor      Float    @default(2.5)
    userId       String
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    quizId       Int
    quizzes      Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)

    @@id([userId, quizId], name: "progress_identifier")
    @@unique([userId, quizId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// Main models
model Post {
    id            String @id @default(cuid())
    caption       String @db.Text
    videoURL      String @db.Text
    coverURL      String @db.Text // video cover or mnemonic image or ""
    videoWidth    Int    @default(0)
    videoHeight   Int    @default(0)
    mnemonic_text String @db.Text
    contentType   Int    @default(3) // 1: image, 2: video, 3: text, 4: unknown

    createdAt     DateTime       @default(now())
    updatedAt     DateTime       @updatedAt
    likes         Like[]
    comments      Comment[]
    notifications Notification[]
    userId        String
    user          User           @relation(fields: [userId], references: [id])

    quizId  Int
    quizzes Quiz @relation(fields: [quizId], references: [id])

    @@fulltext([caption])
}

// one user has many masteries
model Mastery {
    id        Int     @id @default(autoincrement())
    user      User[]
    conceptId String
    concepts  Concept @relation(fields: [conceptId], references: [id])
}

model Like {
    postId String
    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

    @@id([postId, userId])
}

model Notification {
    id          Int      @id @default(autoincrement())
    userId      String // who are we notifying
    user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    content     String // e.g., you have a new like from user <name>
    status      Int      @default(0) // 1: checked, 0: unchecked
    postId      String   @default("")
    posts       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
    quizId      Int   @default(0)
    quizzes     Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
    lastUpdated DateTime @updatedAt
}

model Comment {
    id        String   @id @default(cuid())
    postId    String
    userId    String
    content   String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Follow {
    followerId  String
    followingId String
    follower    User   @relation("followers", fields: [followerId], references: [id], onDelete: Cascade)
    following   User   @relation("followings", fields: [followingId], references: [id], onDelete: Cascade)

    @@id([followingId, followerId])
}

model Subject {
    id      String   @id
    name    String
    domains Domain[]
}

model Domain {
    id        String  @id
    name      String
    subjectId String
    subject   Subject @relation(fields: [subjectId], references: [id])
    skills    Skill[]
}

model Skill {
    id       String    @id
    name     String
    domainId String
    Domain   Domain    @relation(fields: [domainId], references: [id])
    concepts Concept[]
}

model Concept {
    id        String    @id
    name      String
    masteries Mastery[]
    quizzes   Quiz[]
    users     User[]
    skillId   String
    skill     Skill     @relation(fields: [skillId], references: [id])
}

model Quiz {
    id           Int            @id @default(autoincrement())
    name         String         @db.Text
    type         String
    options      String         @db.Text
    answer       String?        @db.Text // optional due to MCQ has answer true/false in the options string
    Post         Post[]
    progress     Progress[]
    conceptId    String
    concepts     Concept        @relation(fields: [conceptId], references: [id])
    Notification Notification[]
}
